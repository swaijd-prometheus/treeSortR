version()
version
R
q()
version
sudo apt-get remove r-base
q()
version
q()
q()
source("http://www.bioconductor.org/biocLite.R") ; biocLite(c("Rsamtools"), dependencies=TRUE)
q()
q()
q()
q()
main.sense
q()
q()
q()
install.packages("rJava")
install.packages("rj", repos="http://download.walware.de/rj-0.5")
q()
sessionInfo()
q()
install.packages("rj")
q()
install.packages(c("rd","rd.gd"),repos="")
install.packages("rj")
install.packages("rj", repos="http://r.research.att.com")
install.packages(c("rj", "rj.gd"), repos="http://download.walware.de/rj-1.1")
q()
cat("Synch12247938007130\n");
Sys.getpid()
cat("Synch12249369193853\n");
getwd()
q()
install.packages("tcltk2")
require(tcltk)      # Load the tcltk package
tt <- tktoplevel()  # Create a new toplevel window
# Create a button whose function (command) is to destroy the window
OK.but <- tkbutton(tt, text = "OK", command = function() tkdestroy(tt))
# Place the button on the window, using the grid manager
tkgrid(OK.but)
# Now, bring the window to the focus, using tkfocus.  (This will not work
# if the code is run from Rgui, because the focus will automatically
# return to Rgui, but it will work if the code is copied and pasted into
# a script file and run using
# Rterm < scriptfile.R > scriptfile.Rout
tkfocus(tt)
q()
require(tcltk)
ReturnVal <- tkmessageBox(title="Greetings from R TclTk",message="Hello, world!",icon="info",type="ok")
require(tcltk)
tt  <- tktoplevel()
txt <- tktext(tt)
tkgrid(txt)
tkmark.set(txt,"insert","0.0")
tkfocus(txt)
tkplot
require(tkplot)
g <- graph.ring(10)
library(tkrplot)
install.packages("tkrplot")
require(tkplot)
require(tkrplot)
library(tkrplot)
source("http://www.bioconductor.org/biocLite.R")
biocLite("tkrplot")
library(tkrplot)
require(tkrplot)
library(tcltk)
library(tkrplot)
tclRequire("Iwidgets")
tt <- tktoplevel()
tkpack(tn <- tkwidget(tt, "iwidgets::tabnotebook"))
tkconfigure(tn,                         # prettyfication taken from incrtcl
tabpos="n",
width=650,
height=350,
angle=0,
bevelamount=2,
gap=2,
margin=2,
tabborders=0,
tabbackground="white",
background="lightgray",
backdrop="lightgray")
nm <- LETTERS[1:26]
for (t in 1:length(nm)) {
tbn <- tclvalue(tkadd(tn, label=nm[t]))
tkpack(tbw <- .Tk.newwin(tbn))
tkpack(fr <- tkframe(tbw))
tkpack(lb <- tklabel(fr, text=paste("This is tab", nm[t])))
ID <- paste(tn$ID, evalq(num.subwin<-num.subwin+1, tn$env), sep=".")
win <- .Tk.newwin(ID)
assign(ID, tbw, envir = tn$env)
assign("parent", tn, envir = tbw$env)
tkpack(tkrplot(fr, function() {
X <- t + (1:20)
plot(X)
}))
#list(tbw,fr,lb) # return all three in case you need them later
}
tkbind(tt, "<Destroy>", function() tkdestroy(tn))
tkselect(tn, 0)
history()
history()
q()
source("http://www.bioconductor.org/biocLite.R")
biocLite("tkrplot", dependencies=TRUE)
q()
q()
Revo64
revo64
q()
q()
export PATH
q()
q()
insta.
install.packages("igraph")
q()
cat("Synch1404983823369\n");
Sys.getpid()
cat("Synch1406776655262\n");
getwd()
q()
cat("Synch293354807357\n");
Sys.getpid()
cat("Synch295491822725\n");
getwd()
q()
tryCatch(1, finally=print("Hello"))
e <- simpleError("test error")
demo(error.catching)
quit()
3.75*4
last.calll
las()
last()
15*12
q()
library(snow)
library(parallel)
q()
q()
library(ape)
setwd(path.expand("~/workspace/tSR"))
setwd(("~/workspace/tSR"))
setwd(("/workspace/tSR"))
getwd()
q()
getwd()
setwd(path.expand("~/dashte/git/tSR/treeSortR/tSR"))
setwd(path.expand("~/git/tSR/treeSortR/tSR"))
q()
